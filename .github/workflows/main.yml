name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  workflow_dispatch:
  push:
    branches:
      - main
      - release/*
      - feature/*
      - bugfix/*
  pull_request:
    branches:  
      - main


jobs:
  build:
    runs-on: [windows-latest]
    outputs:
      version: ${{ steps.version.outputs.version }}
      version_tag: ${{ steps.version.outputs.version_tag }}
      commit: ${{ env.GITHUB_SHA }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Calculate Version
        uses: paulhatch/semantic-version@v4.0.2
        id: version
        with:
          # The prefix to use to identify tags
          tag_prefix: "v"
          # A string to determine the format of the version output
          format: "${major}.${minor}.${patch}.${increment}"
          # Indicate whether short tags like 'v1' should be supported. If false only full
          # tags like 'v1.0.0' will be recognized.
          short_tags: false
          # If this is set to true, *every* commit will be treated as a new version.
          bump_each_commit: false        

      - name: Debug Version
        run: |
          Write-Host "Output of version: ${{ steps.version.outputs.version }}"         
          Write-Host "Output of version_tag: ${{ steps.version.outputs.version_tag }}"         
          Write-Host "Output of major: ${{ steps.version.outputs.major }}"         
          Write-Host "Output of minor: ${{ steps.version.outputs.minor }}"         
          Write-Host "Output of patch: ${{ steps.version.outputs.patch }}"         


      - uses: actions/cache@v3
        id: cache
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
    
      - name: Install Nuget
        uses: nuget/setup-nuget@v1
        with:
          nuget-version: ${{ env.NUGET_VERSION}}

      - name: NuGet to restore dependencies as well as project-specific tools that are specified in the project file
        #if: steps.cache.outputs.cache-hit != 'true'
        run: nuget restore

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1
  
      - name: Build DotNET
        run: |
           msbuild /p:Configuration=Debug /p:Platform=x86 /p:Version=${{ steps.version.outputs.version }} $Env:GITHUB_WORKSPACE
           msbuild /p:Configuration=Release /p:Platform=x86 /p:Version=${{ steps.version.outputs.version }} $Env:GITHUB_WORKSPACE
           
      - name: Sign Assemblys
        uses: GermanBluefox/code-sign-action@v7
        with:
          certificate: '${{ secrets.SIGNINGCERTIFICATE }}'
          password: '${{ secrets.SIGNINGPASSWORD }}'
          certificatesha1: '${{ secrets.SIGNINGCERTHASH }}'
          folder: '${{ github.workspace }}\RaceHorology\bin\x86\Release'
          recursive: true
          timestampUrl: 'http://timestamp.digicert.com'

      - name: Upload Test Programm
        uses: actions/upload-artifact@v3
        with:
          name: unittest_RaceHorologyLibTest
          path: ${{ github.workspace }}\RaceHorologyLibTest\bin\x86
          retention-days: 2

      - name: Build Installer
        run: |
           msbuild /p:Configuration=Release /p:Platform=x86 /p:Version=${{ steps.version.outputs.version }} $Env:GITHUB_WORKSPACE\RaceHorologySetup
           ren ${{ github.workspace }}\RaceHorologySetup\bin\Release\RaceHorologySetup.msi ${{ github.workspace }}\RaceHorologySetup\bin\Release\RaceHorologySetup-${{ steps.version.outputs.version }}.msi

      - name: Test Installer
        uses: Amadevus/pwsh-script@v2.0.3
        id: install_script
        with:
          script: |
            $file = ${{ github.workspace }}\RaceHorologySetup\bin\Release\RaceHorologySetup-${{ steps.version.outputs.version }}.msi
            $log = "install.log" 
            $procMain = Start-Process "msiexec" "/i `"$file`" /qn /l*! `"$log`"" -NoNewWindow -PassThru
            $procLog = Start-Process "powershell" "Get-Content -Path `"$log`" -Wait" -NoNewWindow -PassThru 
            $procMain.WaitForExit() 
            $procLog.Kill()

      - name: Compare Installer
        uses: Amadevus/pwsh-script@v2.0.3
        id: compare_script
        with:
          script: |
            $Source = Get-ChildItem –Path ${{ github.workspace }}\RaceHorology\bin\x86\Release -Recurse | foreach  {Get-FileHash –Path $_.FullName}
            $Target = Get-ChildItem –Path "C:\Program Files (x86)\RaceHorology" -Recurse | foreach {Get-FileHash –Path $_.FullName}
            $Compare = Compare-Object -ReferenceObject $Source -DifferenceObject $Target -Property hash -PassThru | measure
            if ($Compare.Count -gt 0)
              {
                Write-Host "Installation folder and Release build are different!" -ForegroundColor red -BackgroundColor white
                (Compare-Object -ReferenceObject $Source -DifferenceObject $Target -Property hash -PassThru).Path
                Throw "Fail!"
              }

      - name: Sign Installer
        uses: GermanBluefox/code-sign-action@v7
        with:
          certificate: '${{ secrets.SIGNINGCERTIFICATE }}'
          password: '${{ secrets.SIGNINGPASSWORD }}'
          certificatesha1: '${{ secrets.SIGNINGCERTHASH }}'
          folder: '${{ github.workspace }}\RaceHorologySetup\bin\Release\'
          recursive: false
          timestampUrl: 'http://timestamp.digicert.com'
          
      - name: Upload Raw Build
        uses: actions/upload-artifact@v3
        with:
          name: build_RaceHorology
          path: ${{ github.workspace }}\RaceHorology\bin\x86\Release\**

      - name: Upload Installer
        uses: actions/upload-artifact@v3
        with:
          name: installer_RaceHorology
          path: ${{ github.workspace }}\RaceHorologySetup\bin\Release\RaceHorologySetup-${{ steps.version.outputs.version }}.msi
          retention-days: 21



  run_test:
    needs: build
    runs-on: [windows-latest]
    steps:
      - name: Download Test Programm
        uses: actions/download-artifact@v3
        with:
          name: unittest_RaceHorologyLibTest
          path: ${{ github.workspace }}\RaceHorologyLibTest\bin\x86

      - name: Setup VSTest Path
        uses: darenm/Setup-VSTest@v1
      
      - name: VSTest_Debug
        run: vstest.console.exe /Platform:x86 $Env:GITHUB_WORKSPACE\RaceHorologyLibTest\bin\x86\Debug\RaceHorologyLibTest.dll /TestCaseFilter:"TestCategory!=HardwareDependent&TestCategory!=IntegrationDsvOnline" /logger:trx
      
      - name: VSTest_Release
        run: vstest.console.exe /Platform:x86 $Env:GITHUB_WORKSPACE\RaceHorologyLibTest\bin\x86\Release\RaceHorologyLibTest.dll /TestCaseFilter:"TestCategory!=HardwareDependent&TestCategory!=IntegrationDsvOnline" /logger:trx

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        with:
          name: unittest_RaceHorologyLibTest_Results
          path: ${{ github.workspace }}\TestResults\**\*.trx 

  run_test_dsv_online:
    needs: build
    runs-on: [windows-latest]
    steps:
      - name: Download Test Programm
        uses: actions/download-artifact@v3
        with:
          name: unittest_RaceHorologyLibTest
          path: ${{ github.workspace }}\RaceHorologyLibTest\bin\x86

      - name: Setup VSTest Path
        uses: darenm/Setup-VSTest@v1
      
      - name: VSTest_Debug
        run: vstest.console.exe /Platform:x86 $Env:GITHUB_WORKSPACE\RaceHorologyLibTest\bin\x86\Debug\RaceHorologyLibTest.dll /TestCaseFilter:"TestCategory=IntegrationDsvOnline" /logger:trx
      
      - name: VSTest_Release
        run: vstest.console.exe /Platform:x86 $Env:GITHUB_WORKSPACE\RaceHorologyLibTest\bin\x86\Release\RaceHorologyLibTest.dll /TestCaseFilter:"TestCategory=IntegrationDsvOnline" /logger:trx

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        with:
          name: unittest_RaceHorologyLibTest_Results_DsvOnline
          path: ${{ github.workspace }}\TestResults\**\*.trx 

  upload_as_release:
    if: ${{ startsWith(github.ref, 'refs/heads/release') }}
    needs: [build, run_test]
    runs-on: [windows-latest]
    steps:
      - name: Download Installer
        uses: actions/download-artifact@v3
        with:
          name: installer_RaceHorology
          path: ${{ github.workspace }}\RaceHorologySetup\bin\Release

      - name: Create release entry on GitHub
        uses: ncipollo/release-action@v1
        with:
          artifacts: ${{ github.workspace }}\RaceHorologySetup\bin\Release\RaceHorologySetup-*.msi
          prerelease: false
          tag: ${{ needs.build.outputs.version_tag }}
          commit: ${{ needs.build.outputs.commit }}
          token: ${{ secrets.GITHUB_TOKEN }}

  upload_as_pre-release:
    if: ${{ startsWith(github.ref, 'refs/heads/main') }}
    needs: [build, run_test]
    runs-on: [windows-latest]
    steps:
      - name: Download Installer
        uses: actions/download-artifact@v3
        with:
          name: installer_RaceHorology
          path: ${{ github.workspace }}\RaceHorologySetup\bin\Release

      - name: Upload as pre-release 
        uses: ncipollo/release-action@v1
        with:
          artifacts: ${{ github.workspace }}\RaceHorologySetup\bin\Release\RaceHorologySetup-*.msi
          prerelease: true
          tag: pre-${{ needs.build.outputs.version }}
          name: Automatic build from main pre-${{ needs.build.outputs.version }}
          body: Achtung 
                Diese Version wurde automatisch aus den letzten Quellcodeänderungen gebaut und stellt nur den letzten Stand der Änderungen dar.
                Sie könnte daher instabil sein.
          commit: ${{ needs.build.outputs.commit }}
          token: ${{ secrets.GITHUB_TOKEN }}

