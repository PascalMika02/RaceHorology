name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  workflow_dispatch:
  push:
    branches:
      - main
      - feature/*
  pull_request:
    branches:  
      - main


jobs:
  build:
    runs-on: [windows-latest]
    outputs:
      version_tag: ${{ steps.version.outputs.version_tag }}
      commit: ${{ env.GITHUB_SHA }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Calculate Version
        uses: paulhatch/semantic-version@v4.0.2
        id: version
        with:
          # The prefix to use to identify tags
          tag_prefix: "v"
          # A string to determine the format of the version output
          format: "${major}.${minor}.${patch}.${increment}"
          # Named version, will be used as suffix for name version tag
          #namespace: race-horology
          # Indicate whether short tags like 'v1' should be supported. If false only full
          # tags like 'v1.0.0' will be recognized.
          short_tags: false
          # If this is set to true, *every* commit will be treated as a new version.
          bump_each_commit: false        

      - name: Debug Version
        run: |
          Write-Host "Output of version: ${{ steps.version.outputs.version }}"         
          Write-Host "Output of version_tag: ${{ steps.version.outputs.version_tag }}"         
          Write-Host "Output of major: ${{ steps.version.outputs.major }}"         
          Write-Host "Output of minor: ${{ steps.version.outputs.minor }}"         
          Write-Host "Output of patch: ${{ steps.version.outputs.patch }}"         


      - uses: actions/cache@v1
        id: cache
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
    
      - name: Install Nuget
        uses: nuget/setup-nuget@v1
        with:
          nuget-version: ${{ env.NUGET_VERSION}}

      - name: NuGet to restore dependencies as well as project-specific tools that are specified in the project file
        #if: steps.cache.outputs.cache-hit != 'true'
        run: nuget restore

      - name: Build DotNET
        run: |
           cd "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\"
           .\MSBuild.exe /p:Configuration=Debug /p:Platform=x86 /p:Version=${{ steps.version.outputs.version }} $Env:GITHUB_WORKSPACE
           .\MSBuild.exe /p:Configuration=Release /p:Platform=x86 /p:Version=${{ steps.version.outputs.version }} $Env:GITHUB_WORKSPACE

      - name: Upload Test Programm
        uses: actions/upload-artifact@v2
        with:
          name: unittest_RaceHorologyLibTest
          path: ${{ github.workspace }}\RaceHorologyLibTest\bin\x86
          retention-days: 2

      - name: Build Installer
        run: |
           cd "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\Bin\"
           .\MSBuild.exe /p:Configuration=Release /p:Platform=x86 /p:Version=${{ steps.version.outputs.version }} $Env:GITHUB_WORKSPACE\RaceHorologySetup

      - name: Upload Installer
        uses: actions/upload-artifact@v2
        with:
          name: installer_RaceHorology
          path: ${{ github.workspace }}\RaceHorologySetup\bin\Release\RaceHorologySetup.msi
          retention-days: 21



  run_test:
    needs: build
    runs-on: [windows-latest]
    steps:
      - name: Download Test Programm
        uses: actions/download-artifact@v2
        with:
          name: unittest_RaceHorologyLibTest
          path: ${{ github.workspace }}\RaceHorologyLibTest\bin\x86

      - name: Setup VSTest Path
        uses: darenm/Setup-VSTest@v1
      
      - name: VSTest_Debug
        run: vstest.console.exe /Platform:x86 $Env:GITHUB_WORKSPACE\RaceHorologyLibTest\bin\x86\Debug\RaceHorologyLibTest.dll /TestCaseFilter:"TestCategory!=HardwareDependent&TestCategory!=IntegrationDsvOnline" /logger:trx
      
      - name: VSTest_Release
        run: vstest.console.exe /Platform:x86 $Env:GITHUB_WORKSPACE\RaceHorologyLibTest\bin\x86\Release\RaceHorologyLibTest.dll /TestCaseFilter:"TestCategory!=HardwareDependent&TestCategory!=IntegrationDsvOnline" /logger:trx

      - name: Upload Test Results
        uses: actions/upload-artifact@v2
        with:
          name: unittest_RaceHorologyLibTest_Results
          path: ${{ github.workspace }}\TestResults\**\*.trx 

  run_test_dsv_online:
    needs: build
    runs-on: [windows-latest]
    steps:
      - name: Download Test Programm
        uses: actions/download-artifact@v2
        with:
          name: unittest_RaceHorologyLibTest
          path: ${{ github.workspace }}\RaceHorologyLibTest\bin\x86

      - name: Setup VSTest Path
        uses: darenm/Setup-VSTest@v1
      
      - name: VSTest_Debug
        run: vstest.console.exe /Platform:x86 $Env:GITHUB_WORKSPACE\RaceHorologyLibTest\bin\x86\Debug\RaceHorologyLibTest.dll /TestCaseFilter:"TestCategory=IntegrationDsvOnline" /logger:trx
      
      - name: VSTest_Release
        run: vstest.console.exe /Platform:x86 $Env:GITHUB_WORKSPACE\RaceHorologyLibTest\bin\x86\Release\RaceHorologyLibTest.dll /TestCaseFilter:"TestCategory=IntegrationDsvOnline" /logger:trx

      - name: Upload Test Results
        uses: actions/upload-artifact@v2
        with:
          name: unittest_RaceHorologyLibTest_Results_DsvOnline
          path: ${{ github.workspace }}\TestResults\**\*.trx 

  upload_as_release:
    #if: ${{ startsWith(github.ref, 'refs/heads/main') }}
    needs: [build]
    runs-on: [windows-latest]
    steps:
      - name: Create release entry on GitHub
        uses: ncipollo/release-action@v1
        with:
          artifacts: ${{ github.workspace }}\RaceHorologySetup\bin\Release\RaceHorologySetup.msi
          prerelease: true
          tag: ${{ needs.build.outputs.version_tag }}
          commit: ${{ needs.build.outputs.commit }}
          token: ${{ secrets.GITHUB_TOKEN }}

